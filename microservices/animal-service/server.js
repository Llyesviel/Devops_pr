const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3003;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let animals = [
  {
    id: '1',
    name: '–ë–∞—Ä—Å–∏–∫',
    type: '–ö–æ—Ç',
    age: 3,
    description: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç',
    imageUrl: 'https://example.com/cat1.jpg',
    isAdopted: false,
    createdAt: new Date().toISOString()
  },
  {
    id: '2',
    name: '–†–µ–∫—Å',
    type: '–°–æ–±–∞–∫–∞',
    age: 5,
    description: '–ê–∫—Ç–∏–≤–Ω–∞—è —Å–æ–±–∞–∫–∞ –ø–æ—Ä–æ–¥—ã –ª–∞–±—Ä–∞–¥–æ—Ä',
    imageUrl: 'https://example.com/dog1.jpg',
    isAdopted: false,
    createdAt: new Date().toISOString()
  },
  {
    id: '3',
    name: '–ú—É—Ä–∫–∞',
    type: '–ö–æ—à–∫–∞',
    age: 2,
    description: '–°–ø–æ–∫–æ–π–Ω–∞—è —Å–µ—Ä–∞—è –∫–æ—à–∫–∞',
    imageUrl: 'https://example.com/cat2.jpg',
    isAdopted: true,
    createdAt: new Date().toISOString()
  }
];

// Routes

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
app.get('/api/animals', (req, res) => {
  try {
    const { adopted } = req.query;
    let filteredAnimals = animals;
    
    if (adopted !== undefined) {
      const isAdopted = adopted === 'true';
      filteredAnimals = animals.filter(animal => animal.isAdopted === isAdopted);
    }
    
    res.json({
      success: true,
      data: filteredAnimals,
      count: filteredAnimals.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ ID
app.get('/api/animals/:id', (req, res) => {
  try {
    const { id } = req.params;
    const animal = animals.find(a => a.id === id);
    
    if (!animal) {
      return res.status(404).json({
        success: false,
        message: '–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.json({
      success: true,
      data: animal
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
      error: error.message
    });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
app.post('/api/animals', (req, res) => {
  try {
    const { name, type, age, description, imageUrl } = req.body;
    
    if (!name || !type || !age) {
      return res.status(400).json({
        success: false,
        message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, type, age'
      });
    }
    
    const newAnimal = {
      id: uuidv4(),
      name,
      type,
      age: parseInt(age),
      description: description || '',
      imageUrl: imageUrl || '',
      isAdopted: false,
      createdAt: new Date().toISOString()
    };
    
    animals.push(newAnimal);
    
    res.status(201).json({
      success: true,
      data: newAnimal,
      message: '–ñ–∏–≤–æ—Ç–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º
app.put('/api/animals/:id', (req, res) => {
  try {
    const { id } = req.params;
    const { name, type, age, description, imageUrl, isAdopted } = req.body;
    
    const animalIndex = animals.findIndex(a => a.id === id);
    
    if (animalIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    if (name !== undefined) animals[animalIndex].name = name;
    if (type !== undefined) animals[animalIndex].type = type;
    if (age !== undefined) animals[animalIndex].age = parseInt(age);
    if (description !== undefined) animals[animalIndex].description = description;
    if (imageUrl !== undefined) animals[animalIndex].imageUrl = imageUrl;
    if (isAdopted !== undefined) animals[animalIndex].isAdopted = isAdopted;
    
    res.json({
      success: true,
      data: animals[animalIndex],
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
      error: error.message
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ
app.delete('/api/animals/:id', (req, res) => {
  try {
    const { id } = req.params;
    const animalIndex = animals.findIndex(a => a.id === id);
    
    if (animalIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    const deletedAnimal = animals.splice(animalIndex, 1)[0];
    
    res.json({
      success: true,
      data: deletedAnimal,
      message: '–ñ–∏–≤–æ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
      error: error.message
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    service: 'animal-service',
    timestamp: new Date().toISOString(),
    port: PORT
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// Error handler
app.use((error, req, res, next) => {
  console.error('Error:', error);
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    error: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

app.listen(PORT, () => {
  console.log(`üêæ Animal Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìã API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/animals`);
  console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/health`);
});